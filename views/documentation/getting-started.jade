section.ly-section.md-markdown
  :ultramarked
    # Getting Started

    Taunus is a shared-rendering MVC engine for Node.js, and it's _up to you how to use it_. In fact, it might be a good idea for you to **set up just the server-side aspect first**, as that'll teach you how it works even when JavaScript never gets to the client.

    # Table of Contents

    - [How it works](#how-it-works)
    - [Installing Taunus](#installing-taunus)
    - [Setting up the server-side](#setting-up-the-server-side)
      - [Your first route](#your-first-route)
      - [Creating a layout](#creating-a-layout)
      - [Using Jade as your view engine](#using-jade-as-your-view-engine)
      - [Throwing in a controller](#throwing-in-a-controller)
    - [Taunus in the client](#taunus-in-the-client)
      - [Using the Taunus CLI](#using-the-taunus-cli)
      - [Booting up the client-side router](#booting-up-the-client-side-router)
      - [Adding functionality in a client-side controller](#adding-functionality-in-a-client-side-controller)
      - [Compiling your client-side JavaScript](#compiling-your-client-side-javascript)
      - [Using the client-side Taunus API](#using-the-client-side-taunus-api)
      - [Caching and Prefetching](#caching-and-prefetching)
      - [Versioning](#versioning)
    - [The sky is the limit!](#the-sky-is-the-limit-)

    # How it works

    Taunus follows a simple but **proven** set of rules.

    - Define a `function(model)` for each your views
    - Put these views in both the server and the client
    - Define routes for your application
    - Put those routes in both the server and the client
    - Ensure route matches work the same way on both ends
    - Create server-side controllers that yield the model for your views
    - Create client-side controllers if you need to add client-side functionality to a particular view
    - For the first request, always render views on the server-side
    - When rendering a view on the server-side, include the full layout as well!
    - Once the client-side code kicks in, **hijack link clicks** and make AJAX requests instead
    - When you get the JSON model back, render views on the client-side
    - If the `history` API is unavailable, fall back to good old request-response. **Don't confuse your humans with obscure hash routers!**

    I'll step you through these, but rather than looking at implementation details, I'll walk you through the steps you need to take in order to make this flow happen.

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    # Installing Taunus

    First off, you'll need to choose a HTTP server framework for your application. At the moment Taunus supports only a couple of HTTP frameworks, but more may be added if they are popular enough.

    - [Express][6], through [taunus-express][1]
    - [Hapi][7], through [taunus-hapi][2] and the [hapiify][3] transform

    > If you're more of a _"rummage through someone else's code"_ type of developer, you may feel comfortable [going through this website's source code][4], which uses the [Hapi][7] flavor of Taunus. Alternatively you can look at the source code for [ponyfoo.com][5], which is **a more advanced use-case** under the [Express][6] flavor. Or, you could just keep on reading this page, that's okay too.
    >
    > There's also [a Yeoman generator named `generator-taunus`][42] you could use to get started, instead.

    Once you've settled for either [Express][6] or [Hapi][7] you'll be able to proceed. For the purposes of this guide, we'll use [Express][6]. Switching between one of the different HTTP flavors is strikingly easy, though.

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Setting up the server-side

    Naturally, you'll need to install all of the following modules from `npm` to get started.

    ```shell
    mkdir getting-started
    cd getting-started
    npm init
    npm install --save taunus taunus-express express
    ```

    ![Screenshot with `npm init` output][30]

    Let's build our application step-by-step, and I'll walk you through them as we go along. First of all, you'll need the famous `app.js` file.

    ```shell
    touch app.js
    ```

    It's probably a good idea to put something in your `app.js` file, let's do that now.

    ```js
    'use strict';

    var taunus = require('taunus');
    var taunusExpress = require('taunus-express');
    var express = require('express');
    var app = express();
    var options = {};

    taunusExpress(taunus, app, options);
    app.listen(3000);
    ```

    All `taunus-express` really does is add a bunch of routes to your Express `app`. You should note that any middleware and API routes should probably come before the `taunusExpress` invocation. You'll probably be using a catch-all view route that renders a _"Not Found"_ view, blocking any routing beyond that route.

    If you were to run the application now you would get a friendly reminder from Taunus letting you know that you forgot to declare any view routes. Silly you!

    ```shell
    node app
    ```

    ![Screenshot with `node app` output][31]

    The `options` object passed to `taunusExpress` let's you configure Taunus. Instead of discussing every single configuration option you could set here, let's discuss what matters: the _required configuration_. There's two options that you must set if you want your Taunus application to make any sense.

    - `routes` should be an array of view routes
    - `layout` should be a function that takes a single `model` argument and returns an entire HTML document

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Your first route

    Routes need to be placed in its own dedicated module, so that you can reuse it later on **when setting up client-side routing**. Let's create that module and add a route to it.

    ```shell
    touch routes.js
    ```

    ```js
    'use strict';

    module.exports = [
      { route: '/', action: 'home/index' }
    ];
    ```

    Each item in the exported array is a route. In this case, we only have the `/` route with the `home/index` action. Taunus follows the well known [convention over configuration pattern][8], which made [Ruby on Rails][9] famous. _Maybe one day Taunus will be famous too!_ By convention, Taunus will assume that the `home/index` action uses the `home/index` controller and renders the `home/index` view. Of course, _all of that can be changed using configuration_.

    Time to go back to `app.js` and update the `options` object.

    ```js
    'use strict';

    var taunus = require('taunus');
    var taunusExpress = require('taunus-express');
    var express = require('express');
    var app = express();
    var options = {
      routes: require('./routes')
    };

    taunusExpress(taunus, app, options);
    app.listen(3000);
    ```

    It's important to know that if you omit the creation of a controller then Taunus will skip that step, and render the view passing it whatever the default model is _(more on that [in the API documentation][18], but it defaults to `{}`)_.

    Here's what you'd get if you attempted to run the application at this point.

    ```shell
    node app &
    curl localhost:3000
    ```

    ![Screenshot with `node app` results][32]

    Turns out you're missing a lot of things! Taunus is quite lenient and it'll try its best to let you know what you might be missing, though. Apparently you don't have a layout, a server-side controller, or even a view! _That's rough._

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Creating a layout

    Let's also create a layout. For the purposes of making our way through this guide, it'll just be a plain JavaScript function.

    ```shell
    touch layout.js
    ```

    Note that the `partial` property in the `model` _(as seen below)_ is created on the fly after rendering partial views. The layout function we'll be using here effectively means _"use the following combination of plain text and the **(maybe HTML)** partial view"_.

    ```js
    'use strict';

    module.exports = function (model) {
      return 'This is the partial: "' + model.partial + '"';
    };
    ```

    Of course, if you were developing a real application, then you probably wouldn't want to write views as JavaScript functions as that's unproductive, confusing, and hard to maintain. What you could do instead, is use a view-rendering engine that allows you to compile your view templates into JavaScript functions.

    - [Mustache][10] is a templating engine that can compile your views into plain functions, using a syntax that's minimally different from HTML
    - [Jade][11] is another option, and it has a terse syntax where spacing matters but there's no closing tags
    - There's many more alternatives like [Mozilla's Nunjucks][12], [Handlebars][13], and [EJS][14].

    Remember to add the `layout` under the `options` object passed to `taunusExpress`!

    ```js
    'use strict';

    var taunus = require('taunus');
    var taunusExpress = require('taunus-express');
    var express = require('express');
    var app = express();
    var options = {
      routes: require('./routes'),
      layout: require('./layout')
    };

    taunusExpress(taunus, app, options);
    app.listen(3000);
    ```

    Here's what you'd get if you ran the application at this point.

    ```shell
    node app &
    curl localhost:3000
    ```

    ![Screenshot with `node app` output][33]

    At this point we have a layout, but we're still missing the partial view and the server-side controller. We can do without the controller, but having no views is kind of pointless when you're trying to get an MVC engine up and running, right?

    You'll find tools related to view templating in the [complementary modules section][15]. If you don't provide a `layout` property at all, Taunus will render your model in a response by wrapping it in `<pre>` and `<code>` tags, which may aid you when getting started.

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Using Jade as your view engine

    Let's go ahead and use Jade as the view-rendering engine of choice for our views.

    ```shell
    mkdir -p views/home
    touch views/home/index.jade
    ```

    Since we're just getting started, the view will just have some basic static content, and that's it.

    ```jade
    p Hello Taunus!
    ```

    Next you'll want to compile the view into a function. To do that you can use [jadum][16], a specialized Jade compiler that plays well with Taunus by being aware of `require` statements, and thus saving bytes when it comes to client-side rendering. Let's install it globally, for the sake of this exercise _(you should install it locally when you're developing a real application)_.

    ```shell
    npm install --global jadum
    ```

    To compile every view in the `views` directory into functions that work well with Taunus, you can use the command below. The `--output` flag indicates where you want the views to be placed. We chose to use `.bin` because that's where Taunus expects your compiled views to be by default. But since Taunus follows the [convention over configuration][17] approach, you could change that if you wanted to.

    ```shell
    jadum views/** --output .bin
    ```

    Congratulations! Your first view is now operational and built using a full-fledged templating engine! All that's left is for you to run the application and visit it on port `3000`.

    ```shell
    node app &
    open http://localhost:3000
    ```

    ![Screenshot with `node app` output][34]

    Granted, you should _probably_ move the layout into a Jade _(any view engine will do)_ template as well.

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Throwing in a controller

    Controllers are indeed optional, but an application that renders every view using the same model won't get you very far. Controllers allow you to handle the request and put together the model to be used when sending a response. Contrary to what most frameworks propose, Taunus expects every action to have its own individual controller. Since Node.js makes it easy to import components, this setup helps you keep your code modular while still being able to reuse logic by sharing modules across different controllers. Let's create a controller for the `home/view` action.

    ```shell
    mkdir -p controllers/home
    touch controllers/home/index.js
    ```

    The controller module should merely export a function. _Started noticing the pattern?_ The signature for the controller is the same signature as that of any other middleware passed to [Express][6] _(or any route handler passed to [Hapi][7] in the case of `taunus-hapi`)_.

    As you may have noticed in the examples so far, you haven't even set a document title for your HTML pages! Turns out, there's a few model properties _(very few)_ that Taunus is aware of. One of those is the `title` property, and it'll be used to change the `document.title` in your pages when navigating through the client-side. Keep in mind that anything that's not in the `model` property won't be transmitted to the client, and will just be accessible to the layout.

    Here is our newfangled `home/index` controller. As you'll notice, it doesn't disrupt any of the typical Express experience, but merely builds upon it. When `next` is called, the Taunus view-rendering handler will kick in, and render the view using the information that was assigned to `res.viewModel`.

    ```js
    'use strict';

    module.exports = function (req, res, next) {
      res.viewModel = {
        model: {
          title: 'Welcome Home, Taunus!'
        }
      };
      next();
    };
    ```

    Of course, relying on the client-side changes to your page in order to set the view title _wouldn't be progressive_, and thus [it would be really, _really_ bad][17]. We should update the layout to use whatever `title` has been passed to the model. In fact, let's go back to the drawing board and make the layout into a Jade template!

    ```shell
    rm layout.js
    touch views/layout.jade
    jadum views/** --output .bin
    ```

    The `!=` syntax below means that whatever is in the value assigned to the element won't be escaped. That's okay because `partial` is a view where Jade escaped anything that needed escaping, but we wouldn't want HTML tags to be escaped!

    ```jade
    title=model.title
    main!=partial
    ```

    By the way, did you know that `<html>`, `<head>`, and `<body>` are all optional in HTML 5, and that you can safely omit them in your HTML? Of course, rendering engines will still insert those elements automatically into the DOM for you! _How cool is that?_

    ```shell
    jadum views/** --output .bin
    ```

    You should also remember to update the `app.js` module once again!

    ```js
    'use strict';

    var taunus = require('taunus');
    var taunusExpress = require('taunus-express');
    var express = require('express');
    var app = express();
    var options = {
      routes: require('./routes'),
      layout: require('./.bin/views/layout')
    };

    taunusExpress(taunus, app, options);
    app.listen(3000);
    ```

    ```shell
    node app
    ```

    ![Screenshot with `node app` output][35]

    You can now visit `localhost:3000` with your favorite web browser and you'll notice that the view renders as you'd expect. The title will be properly set, and a `<main>` element will have the contents of your view.

    ![Screenshot with application running on Google Chrome][36]

    That's it, now your view has a title. Of course, there's nothing stopping you from adding database calls to fetch bits and pieces of the model before invoking `next` to render the view.

    Then there's also the client-side aspect of setting up Taunus. Let's set it up and see how it opens up our possibilities.

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    # Taunus in the client

    You already know how to set up the basics for server-side rendering, and you know that you should [check out the API documentation][18] to get a more thorough understanding of the public interface on Taunus, and what it enables you to do.

    The way Taunus works on the client-side is so that once you set it up, it will hijack link clicks and use AJAX to fetch models and render those views in the client. If the JavaScript code fails to load, _or if it hasn't loaded yet due to a slow connection such as those in unstable mobile networks_, the regular link would be followed instead and no harm would be unleashed upon the human, except they would get a slightly less fancy experience.

    Setting up the client-side involves a few different steps. Firstly, we'll have to compile the application's wiring _(the routes and JavaScript view functions)_ into something the browser understands. Then, you'll have to mount Taunus on the client-side, passing the wiring so that it knows which routes it should respond to, and which others it should merely ignore. Once that's out of the way, client-side routing would be set up.

    As sugar coating on top of that, you may add client-side functionality using controllers. These controllers would be executed even if the view was rendered on the server-side. They can access the Taunus API directly, in case you need to navigate to another view in some way other than by having humans click on anchor tags. The API, as you'll learn, will also let you render partial views using the powerful Taunus engine, listen for events that may occur at key stages of the view-rendering process, and even intercept AJAX requests blocking them before they ever happen.

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Using the Taunus CLI

    Taunus comes with a CLI that can be used to wire your Node.js routes and views into the client-side. The same CLI can be used to wire up the client-side controllers as well. The main reason why the Taunus CLI exists is so that you don't have to `require` every single view and controller, undoing a lot of the work that was put into code reuse. Just like we did with `jadum` earlier, we'll install the `taunus` CLI globally for the sake of exercising, but we understand that relying on globally installed modules is insufficient for production-grade applications.

    ```shell
    npm install --global taunus
    ```

    Before you can use the CLI, you should move the route definitions to `controllers/routes.js`. That's where Taunus expects them to be. If you want to place them something else, [the API documentation can help you][18].

    ```shell
    mv routes.js controllers/routes.js
    ```

    Since you moved the routes you should also update the `require` statement in the `app.js` module.

    ```js
    'use strict';

    var taunus = require('taunus');
    var taunusExpress = require('taunus-express');
    var express = require('express');
    var app = express();
    var options = {
      routes: require('./controllers/routes'),
      layout: require('./.bin/views/layout')
    };

    taunusExpress(taunus, app, options);
    app.listen(3000);
    ```

    The CLI is terse in both its inputs and its outputs. If you run it without any arguments it'll print out the wiring module, and if you want to persist it you should provide the `--output` flag. In typical [convention-over-configuration][8] fashion, the CLI will default to inferring your views are located in `.bin/views` and that you want the wiring module to be placed in `.bin/wiring.js`, but you'll be able to change that if it doesn't meet your needs.

    ```shell
    taunus --output
    ```

    At this point in our example, the CLI should create a `.bin/wiring.js` file with the contents detailed below. As you can see, even if `taunus` is an automated code-generation tool, it's output is as human readable as any other module.

    ```js
    'use strict';

    var templates = {
      'home/index': require('./views/home/index.js'),
      'layout': require('./views/layout.js')
    };

    var controllers = {
    };

    var routes = [
      {
        route: '/',
        action: 'home/index'
      }
    ];

    module.exports = {
      templates: templates,
      controllers: controllers,
      routes: routes
    };
    ```

    ![Screenshot with `taunus` output][37]

    Note that the `controllers` object is empty because you haven't created any _client-side controllers_ yet. We created server-side controllers but those don't have any effect in the client-side, besides determining what gets sent to the client.

    > **The CLI can be entirely ignored**. You could write these definitions by yourself, but you would have to remember to update the wiring module whenever you add, change, or remove a view, a client-side controller, or a route. Doing that would be cumbersome, and the CLI solves that problem for us at the expense of one additional build step.

    During development, you can also add the `--watch` flag, which will rebuild the wiring module if a relevant file changes.

    ```shell
    taunus --output --watch
    ```

    If you're using Hapi instead of Express, you'll also need to pass in the `hapiify` transform so that routes get converted into something the client-side routing module understand.

    ```shell
    taunus --output --transform hapiify
    ```

    Now that you understand how to use the CLI or build the wiring module on your own, booting up Taunus on the client-side will be an easy thing to do!

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Booting up the client-side router

    Once we have the wiring module, booting up the client-side engine is pretty easy. Taunus suggests you use `client/js` to keep all of your client-side JavaScript logic, but that is up to you too. For the sake of this guide, let's stick to the conventions.

    ```shell
    mkdir -p client/js
    touch client/js/main.js
    ```

    The `main` module will be used as the _entry point_ of your application on the client-side. Here you'll need to import `taunus`, the wiring module we've just built, and a reference to the DOM element where you are rendering your partial views. Once you have all that, you can invoke `taunus.mount`.

    ```js
    'use strict';

    var taunus = require('taunus');
    var wiring = require('../../.bin/wiring');
    var main = document.getElementsByTagName('main')[0];

    taunus.mount(main, wiring);
    ```

    The mountpoint will set up the client-side Taunus router and fire the client-side view controller for the view that has been rendered in the server-side. Whenever an anchor link is clicked, Taunus will be able to hijack that click and request the model using AJAX, but only if it matches a view route. Otherwise the link will behave just like any normal link would.

    By default, the mountpoint will issue an AJAX request for the view model of the server-side rendered view. This is akin to what dedicated client-side rendering frameworks such as AngularJS do, where views are only rendered after all the JavaScript has been downloaded, parsed, and executed. Except Taunus provides human-readable content faster, before the JavaScript even begins downloading, although it won't be functional until the client-side controller runs.

    An alternative is to inline the view model alongside the views in a `<script type='text/taunus'>` tag, but this tends to slow down the initial response (models are _typically larger_ than the resulting views).

    A third strategy is that you request the model asynchronously outside of Taunus, allowing you to fetch both the view model and Taunus itself concurrently, but that's harder to set up.

    The three booting strategies are explained in [the API documentation][18] and further discussed in [the optimization guide][25]. For now, the default strategy _(`'auto'`)_ should suffice. It fetches the view model using an AJAX request right after Taunus loads.

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Adding functionality in a client-side controller

    Client-side controllers run whenever a view is rendered, even if it's a partial. The controller is passed the `model`, containing the model that was used to render the view; the `route`, broken down into its components; and the `container`, which is whatever DOM element the view was rendered into.

    These controllers are entirely optional, which makes sense since we're progressively enhancing the application: it might not even be necessary! Let's add some client-side functionality to the example we've been building.

    ```shell
    mkdir -p client/js/controllers/home
    touch client/js/controllers/home/index.js
    ```

    Guess what? The controller should be a module which exports a function. That function will be called whenever the view is rendered. For the sake of simplicity we'll just print the action and the model to the console. If there's one place where you'd want to enhance the experience, client-side controllers are where you want to put your code.

    ```js
    'use strict';

    module.exports = function (model, container, route) {
      console.log('Rendered view %s using model:\n%s', route.action, JSON.stringify(model, null, 2));
    };
    ```

    Since we weren't using the `--watch` flag from the Taunus CLI, you'll have to recompile the wiring at this point, so that the controller gets added to that manifest.

    ```shell
    taunus --output
    ```

    Of course, you'll now have to wire up the client-side JavaScript using [Browserify][38]!

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Compiling your client-side JavaScript

    You'll need to compile the `client/js/main.js` module, our client-side application's entry point, using Browserify since the code is written using CommonJS. In this example you'll install `browserify` globally to compile the code, but naturally you'll install it locally when working on a real-world application.

    ```shell
    npm install --global browserify
    ```

    Once you have the Browserify CLI, you'll be able to compile the code right from your command line. The `-d` flag tells Browserify to add an inline source map into the compiled bundle, making debugging easier for us. The `-o` flag redirects output to the indicated file, whereas the output is printed to standard output by default.

    ```shell
    mkdir -p .bin/public/js
    browserify client/js/main.js -do .bin/public/js/all.js
    ```

    We haven't done much of anything with the Express application, so you'll need to adjust the `app.js` module to serve static assets. If you're used to Express, you'll notice there's nothing special about how we're using `serve-static`.

    ```shell
    npm install --save serve-static
    ```

    Let's configure the application to serve static assets from `.bin/public`.

    ```js
    'use strict';

    var taunus = require('taunus');
    var taunusExpress = require('taunus-express');
    var express = require('express');
    var serveStatic = require('serve-static');
    var app = express();
    var options = {
      routes: require('./controllers/routes'),
      layout: require('./.bin/views/layout')
    };

    app.use(serveStatic('.bin/public'));
    taunusExpress(taunus, app, options);
    app.listen(3000);
    ```

    Next up, you'll have to edit the layout to include the compiled JavaScript bundle file.

    ```jade
    title=model.title
    main!=partial
    script(src='/js/all.js')
    ```

    Don't forget to compile `layout.jade` again.

    ```shell
    jadum views/** --output .bin
    ```

    Lastly, you can execute the application and see it in action!

    ```shell
    node app
    ```

    ![Screenshot with `node app` output][39]

    If you open the application on a web browser, you'll notice that the appropriate information will be logged into the developer `console`.

    ![Screenshot with the application running under Google Chrome][40]

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Using the client-side Taunus API

    Taunus does provide [a thin API][18] in the client-side. Usage of that API belongs mostly inside the body of client-side view controllers, but there's a few methods you can take advantage of on a global scale as well.

    Taunus can notify you whenever important events occur.

    Event            | Arguments                 | Description
    -----------------|---------------------------|------------------------------------
    `'start'`        | `container, model, route` | Emitted when `taunus.mount` finished the route setup and is about to invoke the client-side controller. Subscribe to this event before calling `taunus.mount`.
    `'render'`       | `container, model, route` | A view has just been rendered and its client-side controller is about to be invoked
    `'change'`       | `route, model`            | Same as `'render'`, but only if `container` is the mountpoint and the route has changed.
    `'fetch.start'`  |  `route, context`         | Emitted whenever an XHR request starts.
    `'fetch.done'`   |  `route, context, data`   | Emitted whenever an XHR request ends successfully.
    `'fetch.abort'`  |  `route, context`         | Emitted whenever an XHR request is purposely aborted.
    `'fetch.error'`  |  `route, context, err`    | Emitted whenever an XHR request results in an HTTP error.

    Besides events, there's a couple more methods you can use. The `taunus.navigate` method allows you to navigate to a URL without the need for a human to click on an anchor link. Then there's `taunus.partial`, and that allows you to render any partial view on a DOM element of your choosing, and it'll then invoke its controller. You'll need to come up with the model yourself, though.

    Astonishingly, the API is further documented in [the API documentation][18].

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Caching and Prefetching

    [Performance][25] plays an important role in Taunus. That's why you can perform caching and prefetching on the client-side just by turning on a pair of flags. But what do these flags do exactly?

    When turned on, by passing `{ cache: true }` as the third parameter for `taunus.mount`, the caching layer will make sure that responses are kept around for `15` seconds. Whenever a route needs a model in order to render a view, it'll first ask the caching layer for a fresh copy. If the caching layer doesn't have a copy, or if that copy is stale _(in this case, older than `15` seconds)_, then an AJAX request will be issued to the server. Of course, the duration is configurable. If you want to use a value other than the default, you should set `cache` to a number in seconds instead of just `true`.

    Since Taunus understands that not every view operates under the same constraints, you're also able to set a `cache` freshness duration directly in your routes. The `cache` property in routes has precedence over the default value.

    There's currently two caching stores: a raw in-memory store, and an [IndexedDB][28] store. IndexedDB is an embedded database solution, and you can think of it like an asynchronous version of `localStorage`. It has [surprisingly broad browser support][29], and in the cases where it's not supported then caching is done solely in-memory.

    The prefetching mechanism is an interesting spin-off of caching, and it requires caching to be enabled in order to work. Whenever humans hover over a link, or whenever they put their finger on one of them _(the `touchstart` event)_, the prefetcher will issue an AJAX request for the view model for that link.

    If the request ends successfully then the response will be cached in the same way any other view would be cached. If the human hovers over another link while the previous one is still being prefetched, then the old request is aborted, as not to drain their _(possibly limited)_ Internet connection bandwidth.

    If the human clicks on the link before prefetching is completed, he'll navigate to the view as soon as prefetching ends, rather than firing another request. This helps Taunus save precious milliseconds when dealing with latency-sensitive operations.

    Turning prefetching on is simply a matter of setting `prefetch` to `true` in the options passed to `taunus.mount`. For additional insights into the performance improvements Taunus can offer, head over to the [Performance Optimizations][25] guide.

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    #### Versioning

    When you alter your views, change controllers, or modify the models, chances are the client-side is going to come across one of the following issues.

    - Outdated view template functions in the client-side, causing new models to break
    - Outdated client-side controllers, causing new models to break or miss out on functionality
    - Outdated models in the cache, causing new views or controllers to break

    Versioning handles these issues gracefully on your behalf. The way it works is that whenever you get a response from Taunus, a _version string (configured on the server-side)_ is included with it. If that version string doesn't match the one stored in the client, then the cache will be flushed and the human will be redirected, forcing a full page reload.

    > The versioning API is unable to handle changes to routes, and it's up to you to make sure that the application stays backwards compatible when it comes to routing.
    >
    > Versioning can't intervene when the client-side is heavily relying on cached views and models, and the human is refusing to reload their browser. The server isn't being accessed and thus it can't communicate that everything on the cache may have become stale. The good news is that the human won't notice any oddities, as the site will continue to work as he knows it. When he finally attempts to visit something that isn't cached, a request is made, and the versioning engine resolves version discrepancies for them.

    Making use of versioning involves setting the `version` field in the options, when invoking `taunus.mount` **on both the server-side and the client-side, using the same value**. The Taunus version string will be added to the one you provided, so that Taunus will know to stay alert for changes to Taunus itself, as well.

    You may use your build identifier or the `version` field in `package.json`, but understand that it may cause the client-side to flush the cache too often _(maybe even on every deployment)_.

    The default version string is set to `1`. The Taunus version will be prepended to yours, resulting in a value such as `t3.0.0;v1` where Taunus is running version `3.0.0` and your application is running version `1`.

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    # The sky is the limit!

    You're now familiar with how Taunus works on a high-level. You have covered a decent amount of ground, but you shouldn't stop there.

    - Learn more about [the API Taunus has][18] to offer
    - Go through the [performance optimization tips][25]. You may learn something new!
    - _Familiarize yourself with the ways of progressive enhancement_
      - Jeremy Keith enunciates ["Be progressive"][20]
      - Christian Heilmann advocates for ["Pragmatic progressive enhancement"][26]
      - Jake Archibald explains how ["Progressive enhancement is faster"][22]
      - I blogged about how we should ["Stop Breaking the Web"][17]
      - Guillermo Rauch argues for ["7 Principles of Rich Web Applications"][24]
      - Aaron Gustafson writes ["Understanding Progressive Enhancement"][21]
      - Orde Saunders gives his point of view in ["Progressive enhancement for fault tolerance"][23]
    - Sift through the [complementary modules][15]. You may find something you hadn't thought of!

    Also, get involved!

    - Fork this repository and [send some pull requests][19] to improve these guides!
    - See something, say something! If you detect a bug, [please create an issue][27]!

    <sub>[_(back to table of contents)_](#table-of-contents)</sub>

    > You'll find a [full fledged version of the Getting Started][41] tutorial application on GitHub.

    [1]: https://github.com/taunus/taunus-express
    [2]: https://github.com/taunus/taunus-hapi
    [3]: https://github.com/taunus/hapiify
    [4]: https://github.com/taunus/taunus.io
    [5]: https://github.com/ponyfoo/ponyfoo
    [6]: http://expressjs.com
    [7]: http://hapijs.com
    [8]: http://en.wikipedia.org/wiki/Convention_over_configuration
    [9]: http://en.wikipedia.org/wiki/Ruby_on_Rails
    [10]: https://github.com/janl/mustache.js
    [11]: https://github.com/jadejs/jade
    [12]: http://mozilla.github.io/nunjucks/
    [13]: http://handlebarsjs.com/
    [14]: http://www.embeddedjs.com/
    [15]: /complements
    [16]: https://github.com/bevacqua/jadum
    [17]: https://ponyfoo.com/articles/stop-breaking-the-web
    [18]: /api
    [19]: https://github.com/taunus/taunus.io/pulls
    [20]: https://adactio.com/journal/7706
    [21]: http://alistapart.com/article/understandingprogressiveenhancement
    [22]: http://jakearchibald.com/2013/progressive-enhancement-is-faster/
    [23]: https://decadecity.net/blog/2013/09/16/progressive-enhancement-for-fault-tolerance
    [24]: http://rauchg.com/2014/7-principles-of-rich-web-applications/
    [25]: /performance
    [26]: http://icant.co.uk/articles/pragmatic-progressive-enhancement/
    [27]: https://github.com/taunus/taunus/issues/new
    [28]: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
    [29]: http://caniuse.com/#feat=indexeddb
    [30]: http://i.imgur.com/4P8vNe9.png
    [31]: http://i.imgur.com/n8mH4mN.png
    [32]: http://i.imgur.com/08lnCec.png
    [33]: http://i.imgur.com/wUbnCyk.png
    [34]: http://i.imgur.com/zjaJYCq.png
    [35]: http://i.imgur.com/NvEWx9z.png
    [36]: http://i.imgur.com/LgZRFn5.png
    [37]: http://i.imgur.com/fIEe5Tm.png
    [38]: http://browserify.org/
    [39]: http://i.imgur.com/68O84wX.png
    [40]: http://i.imgur.com/ZUF6NFl.png
    [41]: https://github.com/taunus/getting-started
    [42]: https://github.com/taunus/generator-taunus
